// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Region")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<int>("Usr_Id");

                    b.Property<string>("street")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Usr_Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Models.Card", b =>
                {
                    b.Property<string>("ESSN");

                    b.Property<string>("Card_Type")
                        .IsRequired();

                    b.Property<string>("Number")
                        .IsRequired();

                    b.HasKey("ESSN");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certi_Path")
                        .IsRequired();

                    b.Property<string>("ESSN")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ESSN");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Desc")
                        .IsRequired();

                    b.Property<int>("Usr_Id");

                    b.HasKey("Id");

                    b.HasIndex("Usr_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Models.Doctor", b =>
                {
                    b.Property<string>("ESSN")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<string>("Degree")
                        .IsRequired();

                    b.Property<int>("Experience");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Usr_Id");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("ESSN");

                    b.HasIndex("Usr_Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Models.DoctorSpec", b =>
                {
                    b.Property<string>("ESSN");

                    b.Property<int>("Spc_Id");

                    b.HasKey("ESSN", "Spc_Id");

                    b.HasIndex("Spc_Id");

                    b.ToTable("DoctorSpecs");
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Msg");

                    b.Property<int>("UserFromId");

                    b.Property<int>("UserToId");

                    b.Property<bool>("delievered");

                    b.Property<bool>("read");

                    b.HasKey("Id");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Message");

                    b.Property<bool>("Read");

                    b.Property<int>("Usr_Id");

                    b.HasKey("Id");

                    b.HasIndex("Usr_Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.OnlineUser", b =>
                {
                    b.Property<string>("ConnectionId");

                    b.Property<int>("Usr_Id");

                    b.HasKey("ConnectionId", "Usr_Id");

                    b.HasIndex("Usr_Id");

                    b.ToTable("onlineUsers");
                });

            modelBuilder.Entity("Models.Phone", b =>
                {
                    b.Property<string>("Number");

                    b.Property<int>("Usr_Id");

                    b.HasKey("Number", "Usr_Id");

                    b.HasIndex("Usr_Id");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Role_Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Models.Specialization", b =>
                {
                    b.Property<int>("Spc_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Spc_Name")
                        .IsRequired();

                    b.HasKey("Spc_Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Accepted");

                    b.Property<bool?>("Completed");

                    b.Property<DateTime>("Date");

                    b.Property<int>("DoctorId");

                    b.Property<string>("Location");

                    b.Property<int>("PatientId");

                    b.Property<string>("QR_Code");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Fname")
                        .IsRequired();

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<string>("Image");

                    b.Property<string>("Lname")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("Role_Id");

                    b.HasKey("Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Address")
                        .HasForeignKey("Usr_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Card", b =>
                {
                    b.HasOne("Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("ESSN")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Certificate", b =>
                {
                    b.HasOne("Models.Doctor", "Doctor")
                        .WithMany("Certificates")
                        .HasForeignKey("ESSN")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Comment", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("Usr_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Doctor", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Usr_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.DoctorSpec", b =>
                {
                    b.HasOne("Models.Doctor", "Doctor")
                        .WithMany("DoctorSpecs")
                        .HasForeignKey("ESSN")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Specialization", "Specialization")
                        .WithMany("DoctorSpecs")
                        .HasForeignKey("Spc_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.HasOne("Models.User", "UserFrom")
                        .WithMany("MessagesFrom")
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.User", "UserTo")
                        .WithMany("MessagesTo")
                        .HasForeignKey("UserToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.Notification", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("Usr_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.OnlineUser", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("OnlineUsers")
                        .HasForeignKey("Usr_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Phone", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Phones")
                        .HasForeignKey("Usr_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Transaction", b =>
                {
                    b.HasOne("Models.User", "Doctor")
                        .WithMany("TransactionsDoctor")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.User", "Patient")
                        .WithMany("TransactionsPatient")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
